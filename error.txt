ABSA Bank: Development server logged in successfully
BBPS-Super Region: 7 elements

  0%|          | 0/2 [00:00<?, ?it/s]Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 125, in _main
    prepare(preparation_data)
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "C:\Program Files\Python310\lib\runpy.py", line 289, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "C:\Program Files\Python310\lib\runpy.py", line 96, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "C:\Program Files\Python310\lib\runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "c:\Programming\TM1\BBPS\4.Dashboards\bbps_generate_dashboards_local.py", line 105, in <module>
    list(tqdm(executor.map(update_dashboard_batch, chunks), total=len(chunks)))
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 761, in map
    results = super().map(partial(_process_chunk, fn),
  File "C:\Program Files\Python310\lib\concurrent\futures\_base.py", line 598, in map
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 125, in _main
    prepare(preparation_data)
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "C:\Program Files\Python310\lib\runpy.py", line 289, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "C:\Program Files\Python310\lib\runpy.py", line 96, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "C:\Program Files\Python310\lib\runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "c:\Programming\TM1\BBPS\4.Dashboards\bbps_generate_dashboards_local.py", line 105, in <module>
    list(tqdm(executor.map(update_dashboard_batch, chunks), total=len(chunks)))
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 761, in map
    results = super().map(partial(_process_chunk, fn),
  File "C:\Program Files\Python310\lib\concurrent\futures\_base.py", line 598, in map
    fs = [self.submit(fn, *args) for args in zip(*iterables)]
  File "C:\Program Files\Python310\lib\concurrent\futures\_base.py", line 598, in <listcomp>
    fs = [self.submit(fn, *args) for args in zip(*iterables)]
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 732, in submit
    self._adjust_process_count()
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 692, in _adjust_process_count
    self._spawn_process()
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 709, in _spawn_process
    p.start()
  File "C:\Program Files\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "C:\Program Files\Python310\lib\multiprocessing\context.py", line 327, in _Popen
    return Popen(process_obj)
  File "C:\Program Files\Python310\lib\multiprocessing\popen_spawn_win32.py", line 45, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
    fs = [self.submit(fn, *args) for args in zip(*iterables)]
  File "C:\Program Files\Python310\lib\concurrent\futures\_base.py", line 598, in <listcomp>
ABSA Bank: Development server logged in successfully
BBPS-Super Region: 7 elements
    fs = [self.submit(fn, *args) for args in zip(*iterables)]
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 732, in submit
    self._adjust_process_count()
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 692, in _adjust_process_count
    self._spawn_process()
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 709, in _spawn_process
    p.start()
  File "C:\Program Files\Python310\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "C:\Program Files\Python310\lib\multiprocessing\context.py", line 327, in _Popen
    return Popen(process_obj)
  File "C:\Program Files\Python310\lib\multiprocessing\popen_spawn_win32.py", line 45, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "C:\Program Files\Python310\lib\multiprocessing\spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
ABSA Bank: Development server logged in successfully
BBPS-Super Region: 7 elements

  0%|          | 0/2 [00:05<?, ?it/s]
Traceback (most recent call last):
  File "c:\Programming\TM1\BBPS\4.Dashboards\bbps_generate_dashboards_local.py", line 105, in <module>
    list(tqdm(executor.map(update_dashboard_batch, chunks), total=len(chunks)))
  File "C:\Users\AB021Y5\AppData\Roaming\Python\Python310\site-packages\tqdm\std.py", line 1195, in __iter__
    for obj in iterable:
  File "C:\Program Files\Python310\lib\concurrent\futures\process.py", line 570, in _chain_from_iterable_of_lists
    for element in iterable:
  File "C:\Program Files\Python310\lib\concurrent\futures\_base.py", line 609, in result_iterator
    yield fs.pop().result()
  File "C:\Program Files\Python310\lib\concurrent\futures\_base.py", line 446, in result
    return self.__get_result()
  File "C:\Program Files\Python310\lib\concurrent\futures\_base.py", line 391, in __get_result
    raise self._exception
concurrent.futures.process.BrokenProcessPool: A process in the process pool was terminated abruptly while the future was running or pending.
